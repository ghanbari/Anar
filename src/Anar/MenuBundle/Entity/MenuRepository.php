<?php

namespace Anar\MenuBundle\Entity;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;

/**
 * MenuRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MenuRepository extends NestedTreeRepository
{
    /**
     * @param int|null $parent parent id
     * @param boolean|null $active menu status
     * @param boolean|null $onTree whether show menu on tree
     * @param array $selected selected menus
     * @return array
     */
    public function getTreeForJstree($parent = null, $active=null, $onTree=null, $locale='fa', array $selected=array())
    {
        $menus = $this->getTreeQuery($parent, $active, $onTree, $locale)->getArrayResult();

        $tree = array();
        foreach ($menus as $menu) {
            if (is_array($menu['parent'])) {
                $parent = $menu['parent']['id'];
            } else {
                $parent = '#';
            }

            $tree[] = array(
                'id' => $menu['id'],
                'parent' => $parent,
                'text' => $menu['name'],
                'state' => array('selected' => in_array($menu['id'], $selected) ? true : false)
            );
        }

        return $tree;
    }

    /**
     * return query that show menu's tree.
     *
     * @param null|int $parent
     * @param null|bool $active
     * @param null|bool $onTree
     * @param string $locale
     * @return \Doctrine\ORM\Query
     */
    public function getTreeQuery($parent = null, $active=null, $onTree=null, $locale='fa')
    {
        $qb = $this->createQueryBuilder('b')->select('b', 'p');
        $qb->leftJoin('b.parent', 'p');

        if (!is_null($parent)) {
            $qb->where($qb->expr()->eq('b.parent', ':parent'));
            $qb->setParameter('parent', $parent);
        }

        if (!is_null($active)) {
            $qb = $qb->andWhere($qb->expr()->eq('b.active', ':active'))
                ->setParameter('active', $active);
        }

        if (!is_null($onTree)) {
            $qb->andWhere($qb->expr()->eq('b.onTree', ':onTree'))
                ->setParameter('onTree', $onTree);
        }
        $query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );

        return $query;
    }

}
