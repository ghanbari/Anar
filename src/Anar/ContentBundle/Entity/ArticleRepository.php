<?php

namespace Anar\ContentBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    public function getFilterByBlogQueryBuilder($blogId)
    {
        $qb = $this->createQueryBuilder('a');

        return $qb->select('a')
            ->where($qb->expr()->eq('a.blog', ':blogId'))
            ->setParameter('blogId', $blogId);
    }

    public function getFilterByBlogQuery($blogId)
    {
        return $this->getFilterByBlogQueryBuilder($blogId)->getQuery();
    }

    public function getAllFullJoinFilterByBlogQuery($blogId)
    {
        return $this->getFilterByBlogQueryBuilder($blogId)
            ->select(array('a', 'c', 'author', 'editor'))
            ->leftJoin('a.author', 'author')
            ->leftJoin('a.editor', 'editor')
            ->leftJoin('a.category', 'c')
            ->orderBy('a.createdAt', 'DESC')
            ->getQuery();
    }

    public function getAllFullJoinFilterByBlogAndCategoryQuery($blogId, $categorySlug)
    {
        $qb = $this->getFilterByBlogQueryBuilder($blogId);
        return $qb->select(array('a', 'c', 'author', 'editor'))
            ->leftJoin('a.author', 'author')
            ->leftJoin('a.editor', 'editor')
            ->leftJoin('a.category', 'c')
            ->andWhere($qb->expr()->eq('c.slug', ':slug'))
            ->setParameter('slug', $categorySlug)
            ->getQuery();
    }
    public function getFilterByBlog($blogId, $limit=10, $offset=1)
    {
        return $this->getFilterByBlogQuery($blogId)
            ->setMaxResults($limit)
            ->setFirstResult($offset)
            ->getResult();
    }

    public function getAllJoinBlogFilterByBlog($blogId, $order, $limit=10, $offset=1)
    {
        $qb = $this->getFilterByBlogQueryBuilder($blogId)
            ->select(array('a', 'b'))
            ->join('a.blog', 'b')
            ->setMaxResults($limit)
            ->setFirstResult($offset);

        foreach ($order as $field => $dir) {
            $qb->addOrderBy($field, $dir);
        }
        return $qb->getQuery()->getResult();
    }

    public function getAllFilterByBlog($blogId)
    {
        return $this->getFilterByBlogQuery($blogId)
            ->getResult();
    }

    public function getAllFilterByQuery($blogId = null, $category = null, $enabled = null, \DateTime $psDate = null, \DateTime $peDate = null, array $order=null, $limit=10, $offset=0)
    {
        $qb = $this->createQueryBuilder('a');

        if (!is_null($blogId)) {
            $qb->join('a.blog', 'b')
                ->andWhere($qb->expr()->eq('b.id', ':blogId'))
                ->setParameter('blogId', $blogId);
        }

        if (!is_null($category)) {
            $qb->join('a.category', 'c')
                ->andWhere($qb->expr()->eq('c.id', ':categoryId'))
                ->setParameter('categoryId', $category->getId());
        }

        if (!is_null($enabled)) {
                $qb->andWhere($qb->expr()->eq('a.enabled', ':enable'))
                ->setParameter('enable', $enabled);
        }

        if (!is_null($psDate)) {
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->lte('a.publicationStartDate', ':psDate'),
                    $qb->expr()->isNull('a.publicationStartDate')
                )
            )->setParameter('psDate', $psDate);
        }

        if (!is_null($peDate)) {
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->gte('a.publicationEndDate', ':peDate'),
                    $qb->expr()->isNull('a.publicationEndDate')
                )
            )->setParameter('peDate', $peDate);
        }

        if (!is_null($order)) {
            foreach ($order as $sort => $dir){
                $qb->addOrderBy($sort, $dir);
            }
        }

        return $qb->setFirstResult($offset)
            ->setMaxResults($limit)
            ->getQuery()->getResult();
    }

    public function count($blogId)
    {
        $qb = $this->createQueryBuilder('a');

        return $qb->select('count(a)')
            ->where($qb->expr()->eq('a.blog', ':blogId'))
            ->setParameter('blogId', $blogId)
            ->getQuery()->getSingleScalarResult();
    }

    public function countExpiredArticle($blogId)
    {
        $qb = $this->createQueryBuilder('a');

        return $qb->select('count(a)')
            ->where($qb->expr()->eq('a.blog', ':blogId'))
            ->andWhere($qb->expr()->lt('a.publicationEndDate', ':now'))
            ->setParameter('blogId', $blogId)
            ->setParameter('now', new \DateTime())
            ->getQuery()->getSingleScalarResult();
    }
}
